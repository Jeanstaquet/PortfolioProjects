[{"C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\index.js":"1","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\App.js":"2","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\reportWebVitals.js":"3","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\containers\\Auth\\Auth.js":"4","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\containers\\Chat\\Chat.js":"5","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\containers\\Conversations\\Conversations.js":"6","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\components\\Conversation\\Conversation.js":"7","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\components\\Message\\Message.js":"8","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\store\\reducer\\auth.js":"9","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\store\\action\\index.js":"10","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\store\\action\\auth.js":"11","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\firebase.js":"12","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\components\\UI\\Spinner\\Spinner.js":"13","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\components\\UI\\Modal\\Modal.js":"14","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\components\\UI\\Backdrop\\Backdrop.js":"15","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\containers\\FeatureMenu\\FeatureMenu.js":"16","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\components\\UI\\ImageModal\\ImageModal.js":"17","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\components\\UI\\MenuContact\\MenuContact.js":"18","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\components\\UI\\WhiteScreen\\WhiteScreen.js":"19"},{"size":984,"mtime":1607904285347,"results":"20","hashOfConfig":"21"},{"size":700,"mtime":1609628325978,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":499162500000,"results":"23","hashOfConfig":"21"},{"size":4562,"mtime":1611149365691,"results":"24","hashOfConfig":"21"},{"size":12016,"mtime":1611146203602,"results":"25","hashOfConfig":"21"},{"size":7301,"mtime":1611151087030,"results":"26","hashOfConfig":"21"},{"size":1440,"mtime":1610835411870,"results":"27","hashOfConfig":"21"},{"size":407,"mtime":1610455379103,"results":"28","hashOfConfig":"21"},{"size":4083,"mtime":1611148869453,"results":"29","hashOfConfig":"21"},{"size":228,"mtime":1611148732910,"results":"30","hashOfConfig":"21"},{"size":4580,"mtime":1611150887470,"results":"31","hashOfConfig":"21"},{"size":834,"mtime":1610673530971,"results":"32","hashOfConfig":"21"},{"size":219,"mtime":1608030482749,"results":"33","hashOfConfig":"21"},{"size":2007,"mtime":1610640796935,"results":"34","hashOfConfig":"21"},{"size":288,"mtime":1608256393575,"results":"35","hashOfConfig":"21"},{"size":2280,"mtime":1610677305458,"results":"36","hashOfConfig":"21"},{"size":1118,"mtime":1611146259864,"results":"37","hashOfConfig":"21"},{"size":678,"mtime":1610484092810,"results":"38","hashOfConfig":"21"},{"size":1286,"mtime":1611146500683,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"cln990",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"42"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"42"},"C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\index.js",[],["89","90"],"C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\App.js",[],"C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\reportWebVitals.js",[],"C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\containers\\Auth\\Auth.js",[],"C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\containers\\Chat\\Chat.js",["91","92","93"],"import React, { useEffect, useState } from 'react';\r\nimport \"./Chat.scss\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport { Avatar } from '@material-ui/core';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport Message from \"../../components/Message/Message\";\r\nimport db, {storage} from \"../../firebase\";\r\nimport firebase from \"firebase\"\r\nimport {connect} from \"react-redux\";\r\nimport ImageModal from \"../../components/UI/ImageModal/ImageModal\";\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Picker from 'emoji-picker-react';\r\nimport * as actions from \"../../store/action/index\";\r\nimport MenuContact from \"../../components/UI/MenuContact/MenuContact\";\r\nconst Chat = (props) => {\r\n    const [mess, setMessage] = useState(\"\");\r\n    const [messageCanal, setMessageCanal] = useState([])\r\n    const [showEmoji, setShowEmoji] = useState(false);\r\n    const [showAddFile, setShowAddFile] = useState(false);\r\n    const [fileSend, setFileSend] = useState(null);\r\n    const [fileError, setFileError] = useState(false);\r\n    const [imageToShow, setImageToShow] = useState(\"\");\r\n    const [searchBar, setSearchBar] = useState(\"\");\r\n    const [showSearchBar, setShowSearchBar] = useState(false);\r\n    const [showContactMenu, setShowContactMenu] = useState(false);\r\n    const [recording, setRecording] = useState(false)\r\n    const [showModalRecording, setShowModalRecording] = useState(true);\r\n    const [blopUrl, setBlopUrl] = useState(\"\")\r\n    let iconSend = mess.length < 1 ? <Tooltip title=\"Record a voice message\" arrow><MicIcon className=\"chat__sendMessageMic\"/></Tooltip> : <Tooltip title=\"Send the message\" arrow><SendIcon onClick={(e) => sendMessage(e, mess)} className=\"chat__sendMessageMic\"/></Tooltip>\r\n\r\n    useEffect(() => {\r\n        let unsubcribe = () => {\r\n\r\n        };\r\n        if(props.userId && props.roomName) {\r\n            unsubcribe = db\r\n            .collection(\"Users\")\r\n            .doc(props.userId)\r\n            .collection(\"conversations\")\r\n            .doc(props.roomName)\r\n            .collection(\"messages\")\r\n            .orderBy(\"timestamp\", \"asc\")\r\n            .onSnapshot(snapshot => (\r\n                setMessageCanal(snapshot.docs.map(doc => (\r\n                    {\r\n                        data: doc.data()\r\n                    }\r\n                )))\r\n            ))\r\n        }\r\n\r\n        return () => {\r\n            unsubcribe()\r\n        }\r\n    }, [props.roomName, props.userId]);\r\n\r\n    const sendMessage = (event) => {\r\n        if(event) {\r\n            event.preventDefault()\r\n        }\r\n        //Query for the current user\r\n        db\r\n            .collection(\"Users\")\r\n            .doc(props.userId)\r\n            .collection(\"conversations\")\r\n            .doc(props.roomName)\r\n            .collection(\"messages\")\r\n            .add({\r\n                message: mess,\r\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                sender: props.pseudo.pseudo\r\n            })\r\n        //Query for the contact     \r\n        db\r\n        .collection(\"Users\")\r\n        .doc(props.contactData.userId)\r\n        .collection(\"conversations\")\r\n        .doc(props.roomName)\r\n        .collection(\"messages\")\r\n        .add({\r\n            message: mess,\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n            sender: props.pseudo.pseudo\r\n        })\r\n\r\n            setMessage(\"\");\r\n    }\r\n\r\n    const fileHandler = (event) => {\r\n        if(event.target.files[0]) {\r\n            if(event.target.files[0].type === \"image/jpeg\" || event.target.files[0].type === \"image/png\") {\r\n\r\n            } else {\r\n                setFileError(true) \r\n                console.log(\"jjj\")\r\n                setTimeout(() => {\r\n                    setFileError(false) \r\n                }, 5000)\r\n                event.target.value = null\r\n                \r\n            }\r\n            setFileSend(event.target.files[0])\r\n        }\r\n    }\r\n    \r\n\r\n    const fileUploadHandler = (event) => {\r\n        event.preventDefault()\r\n        storage.ref(`images/${fileSend.name}`).put(fileSend)\r\n        setTimeout(() => {\r\n            storage\r\n            .ref(\"images\")\r\n            .child(fileSend.name)\r\n            .getDownloadURL()\r\n            .then(url => {\r\n                        //Query for the current user\r\n                db\r\n                .collection(\"Users\")\r\n                .doc(props.userId)\r\n                .collection(\"conversations\")\r\n                .doc(props.roomName)\r\n                .collection(\"messages\")\r\n                .add({\r\n                    message: \"img\",\r\n                    imgUrl: url,\r\n                    timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                    sender: props.pseudo.pseudo\r\n                })\r\n\r\n                        //Query for the contact     \r\n                db\r\n                .collection(\"Users\")\r\n                .doc(props.contactData.userId)\r\n                .collection(\"conversations\")\r\n                .doc(props.roomName)\r\n                .collection(\"messages\")\r\n                .add({\r\n                    message: \"img\",\r\n                    imgUrl: url,\r\n                    timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                    sender: props.pseudo.pseudo\r\n                })\r\n\r\n\r\n            })\r\n        }, 1500);\r\n\r\n            setShowAddFile(false)\r\n    }\r\n\r\n\r\n    const onEmojiClick = (event, emojiObject) => {\r\n        setShowEmoji(false)\r\n        setMessage(mess + emojiObject.emoji)\r\n    };\r\n\r\n    const displayEmojiHandler = () => {\r\n        setShowEmoji(!showEmoji);\r\n        setShowAddFile(false);\r\n    }\r\n\r\n    const displayFileHandler = () => {\r\n        setShowAddFile(!showAddFile)\r\n        setShowEmoji(false)\r\n    }\r\n\r\n    //select an url for the image modal\r\n    const clickedHandler = (imgUrl) => {\r\n        setImageToShow(imgUrl)\r\n    }\r\n\r\n    const closeImageModal = () => {\r\n        setImageToShow(\"\")\r\n    }\r\n    \r\n    const searchBarHandler = () => {\r\n        setShowSearchBar(!showSearchBar)\r\n    }\r\n\r\n    const contactMenuHandler = () => {\r\n        setShowContactMenu(!showContactMenu)\r\n    }\r\n\r\n    const deleteConversation = () => {\r\n        setShowContactMenu(false)\r\n        props.roomDeleteHandler()\r\n        db\r\n        .collection(\"Users\")\r\n        .doc(props.userId)\r\n        .collection(\"conversations\")\r\n        .doc(props.roomName)\r\n        .delete()\r\n        setMessageCanal([])\r\n    }\r\n    let messageBody = document.querySelector('.chat__content');\r\n    if(messageBody) {\r\n        messageBody.scrollTop = messageBody.scrollHeight - messageBody.clientHeight;\r\n    }\r\n    const closeModalRecording = () => {\r\n        setShowModalRecording(!showModalRecording)\r\n    }\r\n\r\n    const beginEndRecording = (arg) => {\r\n        if(arg===\"close\") {\r\n            setRecording(false)\r\n        } else if(arg===\"begin\") {\r\n            setRecording(true)\r\n        }\r\n    }\r\n\r\n    const onData = (recordedBlob, fileName) =>  {\r\n            //A Blob() is almost a File() - it's just missing the two properties below which we will add\r\n            recordedBlob.lastModifiedDate = new Date();\r\n            recordedBlob.name = fileName;\r\n            setBlopUrl(recordedBlob.blobURL); \r\n            console.log(recordedBlob)\r\n\r\n            //let myBlob = new Blob(recordedBlob.blobURL);\r\n            //console.log(myBlob)\r\n            let audio = URL.createObjectURL(recordedBlob.blobURL)\r\n            console.log(audio)\r\n        }\r\n\r\n    return (\r\n        <div className=\"chat__container\">\r\n            <ImageModal \r\n                show={showModalRecording} \r\n                record={true} \r\n                isRec={recording} \r\n                closePP={closeModalRecording}\r\n                recordingBeginEnd={beginEndRecording}\r\n                onData={onData}\r\n                blopUrl={blopUrl}/>\r\n            <div className=\"chat__banner\">\r\n                <div className=\"chat__bannerInfo\">\r\n                    <Avatar className=\"chat__bannerAvatar\" src={props.contactData.photo ? props.contactData.photo: null}>{props.contact!==null ? props.contact[0] : null}</Avatar>\r\n                    <div className=\"chat__info\">\r\n                        <p>{props.contact}</p>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"chat__bannerIcon\">\r\n                    <Tooltip title=\"Search a message\" arrow>\r\n                        <SearchIcon onClick={searchBarHandler}/>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"You can write 'img' or a letter\" arrow>\r\n                    <input type=\"text\" value={searchBar} disabled={props.roomName===null} className={!showSearchBar ? \"chat__bannerSearch\" : \"chat__bannerSearch show\"} onChange={e => setSearchBar(e.target.value)}/>\r\n                    </Tooltip>\r\n                    <MoreHorizIcon onClick={contactMenuHandler}/>\r\n                    <Tooltip title=\"options\" arrow >\r\n                        <MenuContact show={showContactMenu && props.roomName!==null} delete={deleteConversation}/>\r\n                    </Tooltip>\r\n                </div>\r\n            </div>\r\n            <div className=\"chat__content\">\r\n                <div className={showAddFile ? \"chat__addFileModal\" : \"notShow\"}>\r\n                    <form style={{border: fileError ? \"1px solid red\" : null}}>\r\n                        <p style={{display: fileError ? \"block\": \"none\"}}>This not a valid file type</p>\r\n                        <input type=\"file\" onChange={fileHandler}/>\r\n                        <input type=\"submit\" disabled={fileError || fileSend === null ? true : false} onClick={fileUploadHandler}/>\r\n                    </form>\r\n                </div>\r\n                {showEmoji && props.roomName ? <Picker onEmojiClick={onEmojiClick} disableSearchBar={true} /> : null}\r\n                {messageCanal.filter(msg => msg.data.message.includes(searchBar)).map((room, index) => (\r\n                    <Message key={index} \r\n                             message={room.data.imgUrl ? null : room.data.message} \r\n                             img={room.data.imgUrl}\r\n                             clicked={() => clickedHandler(room.data.imgUrl)}\r\n                             reciever={room.data.sender == props.pseudo.pseudo ? false : true}\r\n                             timestamp={room.data.timestamp ? (new Date(room.data.timestamp.seconds * 1000)).toLocaleDateString('en-UK') : null} />\r\n                ))}\r\n            </div>\r\n            <div className=\"chat__sendMessage\">\r\n                <div className=\"chat__sendMessageEmoji\">\r\n                    <Tooltip title=\"Send an emoji\" arrow>\r\n                        <InsertEmoticonIcon onClick={displayEmojiHandler}/>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"Send a picture\" arrow>\r\n                        <AttachFileIcon onClick={displayFileHandler}/>\r\n                    </Tooltip>\r\n                </div>\r\n                <form className=\"chat__sendMessageContent\">\r\n                    <input disabled={props.roomName===null} type=\"text\" onChange={(e) => setMessage(e.target.value)} value={mess}/>\r\n                    <button type=\"submit\" onClick={(event) => sendMessage(event, mess)}></button>\r\n                </form>\r\n                {iconSend}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        userId: state.userId,\r\n        roomName: state.roomName,\r\n        email: state.email,\r\n        pseudo: state.pseudo,\r\n        contact: state.contact,\r\n        contactData: state.contactDetails\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        roomDeleteHandler: () => dispatch(actions.roomDeleteHandler())\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Chat);","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\containers\\Conversations\\Conversations.js",["94","95"],"import React, {useEffect, useState} from 'react';\r\nimport \"./Conversations.scss\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { Avatar } from '@material-ui/core';\r\nimport Conversation from \"../../components/Conversation/Conversation\";\r\nimport {connect} from \"react-redux\";\r\nimport Modal from \"../../components/UI/Modal/Modal\";\r\nimport db, {storage} from \"../../firebase\";\r\nimport FeatureMenu from \"../FeatureMenu/FeatureMenu\";\r\nimport * as actions from \"../../store/action/index\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport ImageModal from \"../../components/UI/ImageModal/ImageModal\";\r\nimport WhiteScreen from \"../../components/UI/WhiteScreen/WhiteScreen\";\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport Paper from '@material-ui/core/Paper';\r\nconst Conversations = (props) => {\r\n    const [modal, setModal] = useState(false); \r\n    const [conversationName, setConversationName] = useState(\"\");\r\n    const [fetchedConversations, setFetchecConversations] = useState([])\r\n    const [contact, setContact] = useState(\"\");\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n    const [menuOpenClose, setMenuOpenClose] = useState(true);\r\n    const [filterName, setFilterName] = useState(\"\");\r\n    const [onModifyPP, setOnModifyPP] = useState(false);\r\n    const [filePP, setFilePP] = useState(null)\r\n\r\n    const toggleModal = () => {\r\n        setModal(true)\r\n    }\r\n\r\n    const toggleModalClose = (e) => {\r\n        e.preventDefault();\r\n        setModal(false)\r\n    }\r\n\r\n    const changeModalHandler = (e) => {\r\n        setConversationName(e.target.value)\r\n    }\r\n\r\n\r\n    const changeContactHandler = (e) => {\r\n        setContact(e.target.value)\r\n    }\r\n\r\n    const addConversationHandler = (e) => {\r\n        e.preventDefault()\r\n        if(contact.length === 0 || conversationName.length === 0) {\r\n            setErrorMessage(\"You have to add an chat name and/or a valid pseudo name\")\r\n            setTimeout(() => {\r\n                setErrorMessage(\"\")\r\n            }, 2500)\r\n        } else {\r\n            checkPseudo(contact)\r\n        }\r\n\r\n    }\r\n\r\n    const checkPseudo = (name) => {\r\n        db.collection(\"Users\").where(\"pseudo\", \"==\", name)\r\n        .get()\r\n        .then((querySnapshot) => {\r\n            if(querySnapshot.empty) {\r\n                setErrorMessage(\"This userd don't exist\")\r\n                setTimeout(() => {\r\n                    setErrorMessage(\"\")\r\n                }, 2500)\r\n            }\r\n            querySnapshot.forEach(function(doc) {\r\n                props.contactDetails(doc.data())\r\n                db.collection(\"Users\").doc(props.userId).collection(\"conversations\").doc(conversationName).set({\r\n                    name: conversationName,\r\n                    contact: doc.data()\r\n\r\n                })\r\n\r\n                db.collection(\"Users\").doc(doc.data().userId).collection(\"conversations\").doc(conversationName).set({\r\n                    name: conversationName,\r\n                    contact: props.dataForContact\r\n                })\r\n                setConversationName(\"\");\r\n                setModal(false)\r\n            });\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        let unsubcribe = () => {\r\n\r\n        }\r\n        if(props.userId) {\r\n            unsubcribe = db.collection(\"Users\")\r\n            .doc(props.userId)\r\n            .collection(\"conversations\")\r\n            .onSnapshot(snapshot => setFetchecConversations(snapshot.docs.map((doc) => doc.data())))\r\n        }\r\n        \r\n    \r\n        return () => {\r\n            unsubcribe()\r\n        }\r\n    \r\n    }, [props.userId])\r\n\r\n\r\n    const handleMenu = () => {\r\n        setMenuOpenClose(!menuOpenClose)\r\n    }\r\n\r\n    const searchHandler = (e) => {\r\n        setFilterName(e.target.value)\r\n    }\r\n\r\n    const newPPHandler = (e) => {\r\n        e.preventDefault();\r\n        if(filePP) {\r\n            storage.ref(`images/${filePP.name}`).put(filePP)\r\n            setTimeout(() => {\r\n                storage\r\n                .ref(\"images\")\r\n                .child(filePP.name)\r\n                .getDownloadURL()\r\n                .then(url => {\r\n                    db\r\n                    .collection(\"Users\")\r\n                    .doc(props.userId)\r\n                    .update({\r\n                        photo: url\r\n                    })\r\n                    props.photoHandler(url)\r\n                })\r\n            }, 1500);\r\n\r\n        }\r\n        setFilePP(null)\r\n        setOnModifyPP(false)\r\n    }\r\n\r\n    const handlerModalPP = () => {\r\n        setOnModifyPP(!onModifyPP)\r\n    }\r\n\r\n    const setFilePPHandler = (event) => {\r\n        setFilePP(event.target.files[0])\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"converstations__container\" >\r\n            <FeatureMenu toggle={handleMenu} open={menuOpenClose}/>\r\n            <WhiteScreen hide={(props.roomName || onModifyPP || modal)}/>\r\n            <Modal show={modal} \r\n                   click={toggleModalClose} \r\n                   change={changeModalHandler}\r\n                   changeContact={changeContactHandler} \r\n                   ok={addConversationHandler}\r\n                   errorMessage={errorMessage}/>\r\n            <div className=\"conv__account\">\r\n                \r\n                <Avatar className=\"conv__avatar\" src={props.pseudo.photo}>{props.pseudo !== null ? props.pseudo.pseudo[0] : null}</Avatar>\r\n                <AddIcon className=\"conversations__plusSign\" onClick={handlerModalPP}/>\r\n                <ImageModal \r\n                    changePP={true} \r\n                    submit={newPPHandler} \r\n                    show={onModifyPP}\r\n                    closePP={handlerModalPP}\r\n                    newFile={setFilePPHandler}/> \r\n                <button onClick={handleMenu}>MENU</button>\r\n            </div>\r\n            <div className=\"conv__searchBar\">\r\n                <input type=\"text\" value={filterName} onChange={e => searchHandler(e)}/>\r\n                <SearchIcon className=\"conv__glass\"/>\r\n            </div>\r\n            <div className=\"conv__list\">\r\n                <Conversation addNewConv={true} click={toggleModal}/>\r\n                {fetchedConversations.filter(name => name.name.includes(filterName)).map((conv, i) => {\r\n                    return <Conversation key={i} \r\n                                         name={conv.contact.pseudo} \r\n                                         roomname={conv.name}\r\n                                         photo={conv.contact.photo}\r\n                                         dispatchRoomName={() => props.roomNameHandler(conv.name, conv.contact.pseudo, conv.contact)}/>\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        photo: state.photo,\r\n        userId: state.userId,\r\n        pseudo: state.pseudo,\r\n        contactData: state.contactDetails,\r\n        dataForContact: state.pseudo,\r\n        isAuth: state.userId !== null,\r\n        roomName: state.roomName\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        roomNameHandler: (r, c, d) => dispatch(actions.roomNameHandler(r, c, d)),\r\n        contactDetails: (d) => dispatch(actions.contactDetails(d)),\r\n        photoHandler: (p) => dispatch(actions.photoHandler(p))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Conversations);","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\components\\Conversation\\Conversation.js",["96"],"import React from 'react';\r\nimport \"./Conversation.scss\";\r\nimport { Avatar } from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport {Link} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\"\r\n\r\nconst Conversation = (props) => {\r\n\r\n    let component = (\r\n        \r\n        <div className=\"conversation__container\" onClick={props.dispatchRoomName}>\r\n            <Avatar className=\"conversation__avatar\" src={props.photo}/>\r\n            <Link to={`/app/${props.userId}/${props.roomname}`}>\r\n            <div className=\"conversation__info\">\r\n                <p className=\"conversation__lastMessage\">Room name: {props.roomname}</p>\r\n                <p className=\"conversation__name\">Contact: {props.name}</p>\r\n            </div>\r\n            </Link>\r\n            <div className=\"conversation__menu\">\r\n        </div>\r\n\r\n    </div>\r\n    );\r\n\r\n    if(props.addNewConv) {\r\n        component = (\r\n            <div className=\"conversation__addBox\">\r\n                <AddIcon className=\"conversation__add\" onClick={props.click}/>\r\n                <h4 className=\"conversation__addText\">Add a new conversation</h4>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        component\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        userId: state.userId\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(Conversation);","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\components\\Message\\Message.js",["97"],"import React from 'react';\r\nimport \"./Message.scss\";\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={props.reciever ? \"message__container\" : \"message__container sender\"}>\r\n            <p>{props.message}</p>\r\n            {props.img ? <img src={props.img} onClick={props.clicked}/> : null}\r\n            <span>{props.timestamp}</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Message;","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\store\\reducer\\auth.js",[],"C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\store\\action\\index.js",[],"C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\store\\action\\auth.js",["98","99"],"import axios from \"axios\";\r\nimport db, {auth, provider} from \"../../firebase\";\r\nimport firebase from \"firebase\";\r\n\r\nexport const authStart = () => {\r\n    return {\r\n        type: \"AUTH_START\"\r\n    }\r\n}\r\n\r\nexport const authSuccess = (token, userId, expirationTime) => {\r\n    return {\r\n        type: \"AUTH_SUCCESS\",\r\n        token: token,\r\n        userId: userId,\r\n        expirationTime: expirationTime\r\n    }\r\n}\r\n\r\nexport const authFail = (message) => {\r\n    return {\r\n        type: \"AUTH_FAIL\",\r\n        message: message\r\n    }\r\n}\r\n\r\nexport const logout = () => {\r\n    return {\r\n        type: \"LOGOUT\"\r\n    }\r\n}\r\n\r\nexport const authReset = () => {\r\n    return {\r\n        type: \"AUTH_RESET\"\r\n    }\r\n}\r\n\r\nexport const pseudoHandler = (pseudo) => {\r\n    return {\r\n        type: \"PSEUDO_HANDLER\",\r\n        pseudo: pseudo\r\n    }\r\n}\r\n\r\n\r\nexport const authEP = (email, password, pseudo, isRegister) => {\r\n    return dispatch => {\r\n        dispatch(authStart());\r\n        const authData = {\r\n            email: email,\r\n            password: password, \r\n            returnSecureToken: true\r\n        }\r\n        let url = \"\"\r\n        if(isRegister) {\r\n            url = \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyAetezyzd_TAHEUZlwBR7FgJKY7vieoebY\";\r\n\r\n        }\r\n        \r\n        if(!isRegister) {\r\n            url = \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyAetezyzd_TAHEUZlwBR7FgJKY7vieoebY\"\r\n        }\r\n        axios.post(url, authData)\r\n            .then(res => {\r\n                if(isRegister) {\r\n                    db.collection(\"Users\").doc(res.data.localId).set({\r\n                        userId: res.data.localId,\r\n                        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                        email: email,\r\n                        pseudo: pseudo,\r\n                        password: password,\r\n                        profilePhoto: \".\"\r\n                    });\r\n                } else {\r\n\r\n                }\r\n                db.collection(\"Users\").where(\"userId\", \"==\", res.data.localId)\r\n                .get()\r\n                .then((querySnapShot) => {\r\n                    querySnapShot.forEach(function(doc) {\r\n                        dispatch(pseudoHandler(doc.data()))\r\n                    })\r\n                })\r\n                dispatch(authSuccess(res.data.idToken, res.data.localId, 60))\r\n            })\r\n            .catch(error => {\r\n                dispatch(authFail(error.response.data.error.message))\r\n                setTimeout(() => {\r\n                    dispatch(authReset())\r\n                }, 5000);\r\n        })\r\n    }\r\n}\r\n\r\n// export const googleAuth = (token, userId, photo, isNew, email) => {\r\n//     return {\r\n//         type: \"SIGN_WITH_GOOGLE\",\r\n//         token: token,\r\n//         userId: userId,\r\n//         photo: photo,\r\n//         isNew: isNew,\r\n//         email: email\r\n//     }\r\n// }\r\n\r\n// export const signWithGoogle = () => {\r\n//     return dispatch => {\r\n//         auth\r\n//         .signInWithPopup(provider)\r\n//         .then(result => {\r\n//             dispatch(googleAuth(result.credential.idToken, \r\n//                                 result.additionalUserInfo.profile.id, \r\n//                                 result.additionalUserInfo.profile.picture, \r\n//                                 result.additionalUserInfo.isNewUser,\r\n//                                 result.additionalUserInfo.profile.email));\r\n//             if(result.additionalUserInfo.isNew) {\r\n//                 db.collection(\"Users\").add({\r\n//                     userId: result.additionalUserInfo.profile.id,\r\n//                     timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n//                     email: result.additionalUserInfo.profile.email,\r\n//                     password: \"googleConnection\"\r\n//                 });\r\n//             }\r\n            \r\n//         })\r\n//     }\r\n// }\r\n\r\nexport const roomNameHandler = (roomName, contact, details) => {\r\n    return {\r\n        type: \"ROOM_NAME_HANDLER\",\r\n        roomName: roomName,\r\n        contact: contact,\r\n        details: details\r\n    }\r\n}\r\n\r\nexport const contactDetails = (details) => {\r\n    return {\r\n        type: \"CONTACT_DATA\",\r\n        details: details\r\n    }\r\n}\r\n\r\nexport const logoutHandler = () => {\r\n    return {\r\n        type: \"LOGOUT_HANDLER\"\r\n    }\r\n}\r\n\r\nexport const roomDeleteHandler = () => {\r\n    return {\r\n        type: \"ROOM_DELETE_HANDLER\"\r\n    }\r\n}\r\n\r\n\r\nexport const photoHandler = (photo) => {\r\n    return {\r\n        type: \"PHOTO_HANDLER\",\r\n        photo: photo\r\n    }\r\n}","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\firebase.js",[],"C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\components\\UI\\Spinner\\Spinner.js",[],["100","101"],"C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\components\\UI\\Modal\\Modal.js",["102"],"import React from 'react';\r\nimport \"./Modal.scss\";\r\nimport Backdrop from \"../Backdrop/Backdrop\";\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nconst Modal = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            {props.children ? <React.Fragment>\r\n                <div  className={props.openModal ? \"modal__container account\" : \"modal__container close\"}>\r\n                <form>\r\n                    <h4 className=\"modular__modalTitle\">{props.title}</h4>\r\n                    <p>{props.info1} : {props.data1}</p>\r\n                    <p>{props.info2} : {props.data2}</p>\r\n                    <p>{props.info3} : {props.data3}</p>\r\n                </form>\r\n            </div>\r\n            </React.Fragment>\r\n            : \r\n            <React.Fragment><Backdrop show={props.show} click={props.click}/>\r\n            <CSSTransition in={props.show} timeout={300} classNames={\"modal-transition\"} unmountOnExit >\r\n            <div className=\"modal__container\" >\r\n                <form>\r\n                    <h4>{props.errorMessage}</h4>\r\n                    <label>Choose a new conversation name</label>\r\n                    <input className={props.errorMessage ? \"errorInput\" : null} placeholder=\"Name\" onChange={(e) => props.change(e)}/>\r\n                    <label>Add the pseudo of your the receiver:</label>\r\n                    <div className=\"modal__addPerson\">\r\n                        <input className={props.errorMessage ? \"errorInput\" : null} type=\"text\" placeholder=\"Pseudo\" onChange={(e) => props.changeContact(e)}/>\r\n                    </div>\r\n                    <div className=\"modal__button\">\r\n                        <button onClick={props.ok}>OK</button>\r\n                        <button onClick={props.click}>Cancel</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            </CSSTransition></React.Fragment>\r\n            }\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Modal;","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\components\\UI\\Backdrop\\Backdrop.js",[],["103","104"],"C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\containers\\FeatureMenu\\FeatureMenu.js",[],"C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\components\\UI\\ImageModal\\ImageModal.js",["105","106"],"import React, { useRef, useState } from 'react';\r\nimport \"./ImageModal.scss\";\r\n\r\nconst ImageModal = (props) => {\r\n    let modal = null;\r\n    if(props.image === true) {\r\n        modal = <div className={props.show ? \"imageModal__container\" : \"hide\"}>\r\n            <div className=\"imageModal__imgContainer\">\r\n                <img src={props.imgUrl} alt=\"\"/>\r\n                <span onClick={props.close}>X</span>\r\n            </div>\r\n        </div>\r\n    } else if (props.changePP === true) {\r\n        modal = \r\n        <div className={props.show ? \"imageModalChangePP__container\" : \"hide\"}>\r\n            <span className=\"imageModalChangePP__close\" onClick={props.closePP}>X</span>\r\n            <h2 className=\"imageModal__title\">You can upload a new profile avatar:</h2>\r\n            <form className=\"\">\r\n                <input type=\"file\" onChange={props.newFile}/>\r\n                <button type=\"submit\" onClick={props.submit}>Submit</button>\r\n            </form>\r\n        </div>\r\n    } \r\n\r\n    return (\r\n        <React.Fragment>\r\n            {modal}\r\n        </React.Fragment>\r\n\r\n    );\r\n};\r\n\r\nexport default ImageModal;","C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\components\\UI\\MenuContact\\MenuContact.js",[],"C:\\Users\\Jean\\Web-training-projects\\whatsapp-revisited-clone\\src\\components\\UI\\WhiteScreen\\WhiteScreen.js",["107","108"],"import React, { useEffect } from 'react';\r\nimport \"./WhiteScreen.scss\";\r\n\r\nconst WhiteScreen = (props) => {\r\n    return (\r\n        <div className={!props.hide ? \"whiteScreen__container\" : \"whiteScreen__container transform\"}>\r\n            <div className=\"whiteScreen__content\">\r\n                <h2 className=\"WhiteScreen__title\">Begin a new conversation</h2>\r\n                <p className=\"WhiteScreen__title\">By clicking here:</p>\r\n                <img classname=\"BeginPhoto\" src=\"https://firebasestorage.googleapis.com/v0/b/whatsappclone-46523.appspot.com/o/images%2FAddConv.PNG?alt=media&token=93d783aa-1013-4953-9ad3-b46ae34aa06c\" alt=\"\"/>\r\n                <p className=\"WhiteScreen__title\">OR</p>\r\n                <h2 className=\"WhiteScreen__title\">Select one of your conversation</h2>\r\n                <p className=\"WhiteScreen__title\">By clicking here:</p>\r\n                <img src=\"https://firebasestorage.googleapis.com/v0/b/whatsappclone-46523.appspot.com/o/images%2Fadd.PNG?alt=media&token=2ed8aa96-5769-4370-badf-b0d816e23861\" className=\"EndPhoto\"/>\r\n                <img className=\"WhatsappLogo\" src=\"https://upload.wikimedia.org/wikipedia/commons/c/cb/Whatsapp_logo.svg\" alt=\"whatsapp logo\"/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WhiteScreen;",{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":26,"column":12,"nodeType":"115","messageId":"116","endLine":26,"endColumn":23},{"ruleId":"113","severity":1,"message":"117","line":176,"column":11,"nodeType":"115","messageId":"116","endLine":176,"endColumn":26},{"ruleId":"118","severity":1,"message":"119","line":273,"column":57,"nodeType":"120","messageId":"121","endLine":273,"endColumn":59},{"ruleId":"113","severity":1,"message":"122","line":14,"column":8,"nodeType":"115","messageId":"116","endLine":14,"endColumn":16},{"ruleId":"113","severity":1,"message":"123","line":15,"column":8,"nodeType":"115","messageId":"116","endLine":15,"endColumn":13},{"ruleId":"113","severity":1,"message":"124","line":4,"column":8,"nodeType":"115","messageId":"116","endLine":4,"endColumn":22},{"ruleId":"125","severity":1,"message":"126","line":7,"column":26,"nodeType":"127","endLine":7,"endColumn":72},{"ruleId":"113","severity":1,"message":"128","line":2,"column":13,"nodeType":"115","messageId":"116","endLine":2,"endColumn":17},{"ruleId":"113","severity":1,"message":"129","line":2,"column":19,"nodeType":"115","messageId":"116","endLine":2,"endColumn":27},{"ruleId":"109","replacedBy":"130"},{"ruleId":"111","replacedBy":"131"},{"ruleId":"113","severity":1,"message":"132","line":5,"column":8,"nodeType":"115","messageId":"116","endLine":5,"endColumn":15},{"ruleId":"109","replacedBy":"133"},{"ruleId":"111","replacedBy":"134"},{"ruleId":"113","severity":1,"message":"135","line":1,"column":17,"nodeType":"115","messageId":"116","endLine":1,"endColumn":23},{"ruleId":"113","severity":1,"message":"136","line":1,"column":25,"nodeType":"115","messageId":"116","endLine":1,"endColumn":33},{"ruleId":"113","severity":1,"message":"137","line":1,"column":17,"nodeType":"115","messageId":"116","endLine":1,"endColumn":26},{"ruleId":"125","severity":1,"message":"126","line":14,"column":17,"nodeType":"127","endLine":14,"endColumn":198},"no-native-reassign",["138"],"no-negated-in-lhs",["139"],"no-unused-vars","'imageToShow' is assigned a value but never used.","Identifier","unusedVar","'closeImageModal' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Collapse' is defined but never used.","'Paper' is defined but never used.","'ExpandMoreIcon' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'auth' is defined but never used.","'provider' is defined but never used.",["138"],["139"],"'AddIcon' is defined but never used.",["138"],["139"],"'useRef' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]